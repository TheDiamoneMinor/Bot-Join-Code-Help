import discord
import os
import json
import asyncio
import logging
import random

from discord import member
from discord import errors
from discord import message
from discord.ext import commands
from discord.ext import tasks
from discord.ext.commands import Cog
from discord.ext import commands
from discord.ext.commands.errors import BotMissingPermissions
from discord.utils import get
from discord import FFmpegPCMAudio
from discord import TextChannel
from youtube_dl import YoutubeDL

client = discord.Client(activity=discord.Game(name='my game'))
Client = commands.Bot(commands.when_mentioned_or('...'))

prefix = "$"
intents = discord.Intents.all()
intents.members = True
bot = commands.Bot(command_prefix="$")
bot.remove_command("help")
client = commands.Bot(command_prefix="$")
client.remove_command("help")

TOKEN = 

@client.event
async def on_ready():
    print('Hydro Bot is ready!')

@client.command()
async def hello(ctx):
    await ctx.send("Hello There!")

@client.command()
@commands.has_permissions(administrator=True)
async def say(ctx, *, arg):
    await ctx.message.delete()
    await ctx.send(arg)

@client.command()
async def avatar(ctx, *,  avamember : discord.Member=None):
    userAvatarUrl = avamember.avatar_url
    await ctx.send(userAvatarUrl)

@client.command(pass_context=True)
async def ping(ctx):
    embed = discord.Embed(title=f'Pong! Latency: {round(client.latency * 1000)}ms')
    await ctx.send(embed=embed)

@client.command(name="version")
async def version(context):
    myEmbed = discord.Embed(title="Current Version",description="The bot is on version 1.3.2", color=0x00ff00)
    myEmbed.add_field(name="Version Code:", value="v1.3.2",inline=False)
    myEmbed.add_field(name="Version Name:", value="Cycling Status",inline=False)
    myEmbed.add_field(name="Date Released:", value="Sept 1, 2021", inline=False)
    myEmbed.add_field(name="Next Version:", value="Music Update",inline=True)
    myEmbed.add_field(name="Release Date:", value="By Sept 15, 2021", inline=True)
    myEmbed.set_footer(text="Bot Released June 15, 2021")
    myEmbed.set_author(name="DiamoneUHC")

    await context.message.channel.send(embed=myEmbed)

@client.command(aliases=["whois","user","info"])
async def userinfo(ctx, member: discord.Member):
    roles = [role for role in member.roles]

    embed = discord.Embed(color = member.color, timestamp=ctx.message.created_at)

    embed.set_author(name=f"User Info - {member}")
    embed.set_thumbnail(url=member.avatar_url)
    embed.set_footer(text=f"Requested by {ctx.author}", icon_url=ctx.author.avatar_url)

    embed.add_field(name="ID:", value=member.id)
    embed.add_field(name="Guild name:", value=member.display_name)

    embed.add_field(name="Created at:", value=member.created_at.strftime("%a, %#d %B %Y, %I:%M %p UTC"))
    embed.add_field(name="joined at:", value=member.joined_at.strftime("%a, %#d %B %Y, %I:%M %p UTC"))
    
    embed.add_field(name=f"Roles ({len(roles)})", value= " ".join([role.mention for role in roles]))
    embed.add_field(name="Top role:", value=member.top_role.mention)

    embed.add_field(name="Bot?", value=member.bot)

    await ctx.send(embed=embed)

@client.command(aliases=["mc"])
async def membercount(ctx):
    a=ctx.guild.member_count
    b=discord.Embed(title=f"members in {ctx.guild.name}",description=a,color=discord.Color((0x0621c0)))
    await ctx.send(embed=b)

@client.command(aliases=["purge","prune"])
@commands.has_permissions(administrator=True)
async def clear(ctx, amount=25):
    await ctx.message.delete()
    await ctx.channel.purge(limit=amount)

@client.command(name="help")
async def help(ctx):
    embed=discord.Embed(
        title="Hydro Bot Help Command",
        color=0x06a242)
    embed.set_author(name="DiamoneUHC")
    embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/858839497257385984/858863032863162419/E4.PNG")
    embed.add_field(name="avatar", value="shows user's avatar", inline=False)
    embed.add_field(name="clear {#}", value="Clears specified amount of messages", inline=False)
    embed.add_field(name="hello", value="Hello There!", inline=False)
    embed.add_field(name="help", value="Shows this page", inline=False)
    embed.add_field(name="membercount", value="Member count of the server", inline=False)
    embed.add_field(name="mc", value="Member count of the server", inline=False)
    embed.add_field(name="ping", value="Pong! Shows your Ping", inline=False)
    embed.add_field(name="Say {phrase}", value="Get the bot to say a phrase", inline=False)
    embed.add_field(name="userinfo {user}", value="Shows a user's info", inline=False)
    embed.add_field(name="version", value="Hydro Bot's current version", inline=False)
    embed.set_footer(text="Bot brought to you by DiamoneUHC")
    
    await ctx.send(embed=embed)

@client.command()
@commands.has_permissions(administrator=True)
async def kick(ctx, member : discord.Member, *, reason=None):
	await member.kick(reason=reason)

@client.command()
@commands.has_permissions(administrator=True)
async def ban(ctx, member : discord.Member, *, reason=None):
	await ctx.message.delete()
	await member.ban(reason=reason)
	await ctx.send(f'Banned {member.mention}')

@client.command()
@commands.has_permissions(administrator=True)
async def unban(ctx, *, member):
	await ctx.message.delete()
	banned_users = await ctx.guild.bans()
	member_name, member_discriminator = member.split('#')
	
	for ban_entry in banned_users:
		user = ban_entry.user
		
		if(user.name, user.discriminator) == (member_name, member_discriminator):
			await ctx.guild.unban(user)
			await ctx.send(f'Unbanned {user.mention}')
			return

@client.command()
async def join(ctx):
    channel = ctx.author.voice.channel
    await channel.connect()
    
@client.command()
async def leave(ctx):
    await ctx.voice_client.disconnect()

@client.command()
async def play(ctx, url):
    YDL_OPTIONS = {'format': 'bestaudio', 'noplaylist': 'True'}
    FFMPEG_OPTIONS = {
        'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5', 'options': '-vn'}
    voice = get(client.voice_clients, guild=ctx.guild)

    if not voice.is_playing():
        with YoutubeDL(YDL_OPTIONS) as ydl:
            info = ydl.extract_info(url, download=False)
        URL = info['url']
        voice.play(FFmpegPCMAudio(URL, **FFMPEG_OPTIONS))
        voice.is_playing()
        await ctx.send('Bot is playing')

    else:
        await ctx.send("Bot is already playing")
        return

@client.command()
async def resume(ctx):
    voice = get(client.voice_clients, guild=ctx.guild)

    if not voice.is_playing():
        voice.resume()
        await ctx.send('Bot is resuming')

@client.command()
async def pause(ctx):
    voice = get(client.voice_clients, guild=ctx.guild)

    if voice.is_playing():
        voice.pause()
        await ctx.send('Bot has been paused')

@client.command()
async def stop(ctx):
    voice = get(client.voice_clients, guild=ctx.guild)

    if voice.is_playing():
        voice.stop()
        await ctx.send('Stopping...')


async def ch_pr():
	await client.wait_until_ready()
	
	statuses = [f"on {len(client.guilds)} servers | $help", "discord.py","Hydro Bot v1.3.2","Hydro Bot v1.4.0 by Sept 15"]
	
	while not client.is_closed():
		
		random.choice(statuses)
		
		status = random.choice(statuses)
		
		await client.change_presence(activity=discord.Game(name=status))
		
		await asyncio.sleep(15)

client.loop.create_task(ch_pr())
client.run(TOKEN)
